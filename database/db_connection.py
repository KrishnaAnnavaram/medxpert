import psycopg2
import os
from dotenv import load_dotenv

# Load .env variables
load_dotenv()

# DB config from .env
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

def get_connection():
    return psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )

def fetch_all_medicines():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM medicines_table")
    rows = cursor.fetchall()
    cols = [desc[0] for desc in cursor.description]
    conn.close()
    return cols, rows

def search_medicines(user_query):
    conn = get_connection()
    cursor = conn.cursor()

    query = """
        SELECT * FROM medicines_table
        WHERE "Medicine_Name" ILIKE %s
        OR "Composition" ILIKE %s
        OR "Uses" ILIKE %s
        ORDER BY "Excellent_Review_Percent" DESC LIMIT 3;
    """

    cursor.execute(query, (f"%{user_query}%", f"%{user_query}%", f"%{user_query}%"))
    rows = cursor.fetchall()
    cols = [desc[0] for desc in cursor.description]
    conn.close()
    return cols, rows

def run_sql_query(query):
    """
    Executes a raw SQL query (usually generated by GPT) against the PostgreSQL database.
    
    Returns:
        - columns (list of column names)
        - rows (list of result tuples)
    If an error occurs, returns (None, []) and prints the error.
    """
    conn = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        cols = [desc[0] for desc in cursor.description]
        return cols, rows
    except Exception as e:
        print(f"‚ùå SQL Execution Error: {e}")
        return None, []
    finally:
        if conn:
            conn.close()
